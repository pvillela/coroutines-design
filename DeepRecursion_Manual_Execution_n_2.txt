DeepRecursion -- Execution of depth(deepTree) with n = 2
========================================================

Note:
-----
-   sm[x, y, z] is the state machine produced when `function` is invoked with input x 
    and continuation y, when it is at state z.
-   Tree1 = Tree(null, null)


runCallLoop
    loop 1
        value = Tree(Tree1, Tree1)
        cont = this
        r = 
            function(this, value, cont)
                callRecursive(Tree1)  // left
                    this.cont = sm[Tree(Tree1, Tree1), this, left]
                    this.value = Tree1
                    COROUTINE_SUSPENDED
    loop 2
        value = Tree1
        cont = sm[Tree(Tree1, Tree1), this, left]
        r = 
            function(this, value, cont)
                callRecursive(null)  // left
                    this.cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, left], left]
                    this.value = null
                    COROUTINE_SUSPENDED
    loop 3
        value = null
        cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, left], left]
        r = 
            function(this, value, cont)
                0
        cont.resume(0)
            resL = 0
            callRecursive(null)  // right
                this.cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, left], right]
                this.value = null
                COROUTINE_SUSPENDED
    loop 4
        value = null
        cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, left], right]
        r =
            function(this, value, cont)
                0
        cont.resume(0)
            resR = 0
            max(0, 0) = 0
            0 + 1 = 1
            sm[Tree(Tree1, Tree1), this, left].resume(1)
                resL = 1
                callRecursive(Tree1) // right
                    this.cont = sm[Tree(Tree1, Tree1), this, right]
                    this.value = Tree1
                    COROUTINE_SUSPENDED
    loop 5
        value = Tree1
        cont = sm[Tree(Tree1, Tree1), this, right]
        r =
            function(this, value, cont)
                callRecursive(null) // left
                    this.cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, right], left]
                    this.value = null
                    COROUTINE_SUSPENDED
    loop 6
        value = null
        cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, right], left]
        r =
            function(this, value, cont)
                0
        cont.resume(0)
            resL = 0
            callRecursive(null)  // right
                this.cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, right], right]
                this.value = null
                COROUTINE_SUSPENDED
    loop 7
        value = null
        cont = sm[Tree1, sm[Tree(Tree1, Tree1), this, right], right]
        r =
            function(this, value, cont)
                0
        cont.resume(0)
            resR = 0
            max(0, 0) = 0
            0 + 1 = 1
            sm[Tree(Tree1, Tree1), this, right].resume(1)
                resR = 1
                max(1, 1) = 1
                1 + 1 = 2
                this.resume(2)
                    completed = true
                    this.result = Success(2)
    return result.getOrThrow()
